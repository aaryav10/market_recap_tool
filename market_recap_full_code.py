# -*- coding: utf-8 -*-
"""market_recap_full_code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11zlVMleV9joxsnvJAbTKhl_R2ZUm3DkA
"""

from newsapi import NewsApiClient
import os
import io
from openai import OpenAI
import yfinance as yf
import streamlit as st

OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]
NEWS_API_KEY = st.secrets["NEWS_API_KEY"]

client = OpenAI(api_key=OPENAI_API_KEY)
newsapi = NewsApiClient(api_key = NEWS_API_KEY)

if 'headlines' not in st.session_state:
    with st.status("Fetching news articles") as status :
        response = newsapi.get_everything(q='stocks OR earnings OR options OR inflation OR Fed OR S&P OR Nasdaq OR NOT crypto NOT bitcoin',
                                      language = 'en',
                                      sort_by='relevancy',
                                      page_size = 15,
                                      domains='wsj.com, bloomberg.com, finance.yahoo.com, marketwatch.com, reuters.com, ft.com, cnbc.com',)
    
        headlines = []
        for article in response['articles']:
          author = article.get('author')
          if author and 'Quentin Fottrell' in author:
            continue
          headlines.append({'title':article['title'], 'content': article.get('content',''), 'url': article.get('url','')})
        st.session_state.headlines = headlines
        status.done()
else:
    headlines = st.session_state.headlines

tickers = {'^GSPC': 'S&P500',
           '^NDX': 'Nasdaq',
           '^DJI': 'Dow Jones',
           '^VIX': 'VIX'}

def get_market_snapshot(ticker_map):
    snapshot = {}
    for symbol, name in ticker_map.items():
        data = yf.Ticker(symbol).history(period="2d")
        if len(data) < 2:
            continue
        prev_close = data['Close'].iloc[-2]
        last_close = data['Close'].iloc[-1]
        pct_change = ((last_close - prev_close) / prev_close) * 100
        snapshot[name] = {'last_close': last_close, 'pct_change': pct_change}
    return snapshot

if 'snapshot' not in st.session_state:
    with st.status("Gathering market data") as status:
        snapshot = get_market_snapshot(tickers)
        st.session_state.snapshot = snapshot
        status.done()
else:
    snapshot = st.session_state.snapshot

sp500 = snapshot.get('S&P500', {'last_close': 'N/A', 'pct_change': 0})
nasdaq = snapshot.get('Nasdaq', {'last_close': 'N/A', 'pct_change': 0})
vix = snapshot.get('VIX', {'last_close': 'N/A', 'pct_change': 0})

if 'script' not in st.session_state:
    with st.status("Generating market recap") as status:
        
        instructions = ("You are a professional market analyst. Create a clear, weekly recap script (3-4 min) for U.S. equity markets based on the news articles we give. IT should read like a person writing a cohesive, combined summary of these articles:"
        "Note any macro trends, earnings, or market implications. Don't include insert date comment, and don't refer it to traders. Also make the number in numeric so that TTS can read it. Further check any spelling mistakes in the script")
        
        input = (
            f"S&P 500 closed at {sp500['last_close']} with a {sp500['pct_change']:.2f}% change, "
            f"Nasdaq closed at {nasdaq['last_close']} with a {nasdaq['pct_change']:.2f}% change, "
            f"VIX was at {vix['last_close']} with a {vix['pct_change']:.2f}% change. "
            f"Top stories with content: {headlines[:10]}"
        )
    
        response_script = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": instructions},
                {"role": "user", "content": input}
            ]
        )
        script = response_script.choices[0].message.content
        st.session_state.script = script
        status.done()
else:
    script = st.session_state.script

if 'audio_bytes' not in st.session_state:    
    with st.status("Creating audio file") as status:
        response_audio = client.audio.speech.create(
            model="tts-1",
            voice="alloy",
            input=script
        )
        st.session_state.audio_bytes = response_audio.read()
        status.done()

audio_bytes = st.session_state.audio_bytes
    
bullet_points = "\n".join([f"• {h['title']}" for h in headlines[:15]])
st.success("✅ Recap generated")

# Strealit code to display on the webpage
st.title("📈 U.S. Market Recap")

# 🎙️ Audio player
st.subheader("🎧 Download the audio file")
st.download_button(
    "Download MP3",
    data=audio_bytes,
    file_name="recap.mp3",
    mime="audio/mpeg"
)

# 📝 Recap script
st.subheader("📝 Market Recap")
st.write(script)

# 📊 Market snapshot
st.subheader("📊 Market Snapshot")
for index, data in snapshot.items():
    direction = "up" if data['pct_change'] >= 0 else "down"
    st.write(f"**{index}**: {data['last_close']:.2f} ({direction} {abs(data['pct_change']):.2f}%)")

# 📰 Headlines with links and short summaries
st.subheader("📰 Top Headlines with Summaries")
for i, h in enumerate(headlines[:10]):
    st.markdown(f"**{i+1}. [{h['title']}]({h['url']})**  ")
    st.write(h['content'] or "_No summary available._")
    st.markdown("---")
